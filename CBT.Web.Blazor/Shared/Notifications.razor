@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Net.Http.Headers;

@using CBT.Web.Blazor.Services.Authentication;

@implements IAsyncDisposable

@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IHttpContextAccessor HttpContextAccessor;

<div style="margin-right: 10px;">
    @{
        if (int.TryParse(_messages.LastOrDefault() ?? "0", out var count))
        {
            if (count > 0)
            {
                <span style="color: red; font-size: 20px;"><i class="oi oi-bell"></i> @count</span>
            }
        }
        else
        {
            <span style="color: red; font-size: 20px;">Error</span>
        }
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private List<string> _messages = new();
    private bool hubRan = false;

    protected override async Task OnInitializedAsync()
    {
        if (!hubRan)
        {
            try
            {
                var cookieValue = HttpContextAccessor?.HttpContext?.Request.Cookies.First();
                //var authCookieHeaderValue = await JSRuntime.InvokeAsync<string>("readAuthCookie");
                if (cookieValue != null)
                {
                    var cookie = new System.Net.Cookie
                        {
                            Domain = GetDomain(NavigationManager.BaseUri),
                            Name = cookieValue.Value.Key,
                            Value = cookieValue.Value.Value,
                            Expires = DateTime.Now.AddDays(1)
                        };

                    _hubConnection = new HubConnectionBuilder()
                        .WithUrl(NavigationManager.ToAbsoluteUri("/notifications"), options =>
                         {
                             //options.UseDefaultCredentials = true;

                             options.Cookies.Add(cookie);
                         })
                        .Build();

                    _hubConnection.On<string>("ReceiveNotification", message =>
                    {
                        _messages.Add(message);

                        InvokeAsync(StateHasChanged);
                    });

                    _hubConnection.Reconnecting += async (ex) =>
                    {
                        hubRan = false;

                        await Task.Delay(5000);
                        await _hubConnection.StartAsync();
                        hubRan = true;
                    };

                    await _hubConnection.StartAsync();
                    hubRan = true;
                }
            }
            catch(Exception ex)
            {
                _messages.Add(ex.ToString());
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
            hubRan = false;
        }
    }

    private string GetDomain(string baseUrl)
    {
        var domainWithPort = baseUrl
                        .Replace(Uri.UriSchemeHttps, string.Empty)
                        .Replace(Uri.UriSchemeHttp, string.Empty)
                        .Replace("://", string.Empty);
        var domainEndIndex = domainWithPort.LastIndexOf(':');
        if (domainEndIndex == -1)
        {
            domainEndIndex = domainWithPort.Length - 1;
        }

        var domain = domainWithPort
           .Substring(0, domainEndIndex);

        return domain;
    }
}
