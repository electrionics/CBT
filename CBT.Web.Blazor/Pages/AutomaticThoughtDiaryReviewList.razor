@page "/review/automatic-thoughts"

@using CBT.Web.Blazor.Data
@using CBT.Web.Blazor.Data.Identity;
@using CBT.Web.Blazor.Data.Model;
@using CBT.Web.Blazor.Data.Model.Enums;
@using CBT.Web.Blazor.Services;

@using Microsoft.AspNetCore.Identity;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids;

@inject PsychologistReviewService PsychologistReviewService
@inject AutomaticThoughtsService AutomaticThoughtsService
@inject SfDialogService SfDialogService;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<User> UserManager;

<PageTitle>КПТ - Техника трёх колонок</PageTitle>

<h1>Кабинет психолога - Дневник автоматических мыслей</h1>

@if (cognitiveErrors == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="alert alert-secondary mt-4">
        Всего @(items.Count) записей.
    </div>
    @code {
    private string? activeBreakpoint;
    private RowDirection rowDirection;
    }
    <SfMediaQuery @bind-ActiveBreakpoint="activeBreakpoint"></SfMediaQuery>
    @if (activeBreakpoint == "Medium" || activeBreakpoint == "Small")
    {
        rowDirection = RowDirection.Vertical;
    }
    else
    {
        rowDirection = RowDirection.Horizontal;
    }
    <SfGrid @ref="DataGrid" EnableAdaptiveUI="true" AdaptiveUIMode="AdaptiveMode.Both" RowRenderingMode="@rowDirection" Height="100%" Width="100%" DataSource="items">
        <GridColumns>
            <GridColumn HeaderText="">
                <Template>
                    @{
                        var model = (ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>)context;
                        if (!model.SentBack)
                        {
                            if (model.State == ReviewRecordState.Reviewed)
                            {
                                <button class="btn btn-success" @onclick="@(async () => await SendBtnClick(model.Value.Id))">
                                    Клиенту
                                </button>
                            }
                            else
                            {

                                <text>
                                    <i class="oi oi-circle-check" style="color: blue;" /> Принято
                                </text>
                            }
                        }
                        else
                        {
                            <text>
                                <i class="oi oi-circle-check" style="color: green;" /> Проверено!
                            </text>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>.Value.Situation)"
                        HeaderText="Ситуация"/>
            <GridColumn Field="@nameof(ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>.Value.BeginningEmotionValues)"
                HeaderText="Эмоции">
                <Template>
                    @{
                        var recordEmotions = ((ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>)context).Value.BeginningEmotionValues;
                        foreach (var emotion in recordEmotions)
                        {
                            <span>@emotions[emotion.Key] - @(emotion.Value)%</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="Value.Thought"
                        HeaderText="Автоматическая мысль" />
            <GridColumn Field="Value.Errors"
                        HeaderText="Когнитивные искажения">
                <Template>
                    @{
                        var errors = ((ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>)context).Value.Errors;
                        foreach (var error in errors)
                        {
                            <span>@cognitiveErrors[(int)error].Title</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="Value.RationalAnswer"
                        HeaderText="Рациональный ответ" />
            <GridColumn Field="@nameof(ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>.Value.ResultingEmotionValues)"
                        HeaderText="Результат">
                <Template>
                    @{
                        var recordEmotions = ((ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>)context).Value.ResultingEmotionValues;
                        foreach (var emotion in recordEmotions)
                        {
                            <span>@emotions[emotion.Key] - @(emotion.Value)%</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>.ReviewedErrors)"
                        HeaderText="Когнитивные искажения">
                <Template>
                    @{
                        var errors = ((ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>)context).ReviewedErrors;
                        foreach (var error in errors)
                        {
                            <span>@cognitiveErrors[(int)error].Title</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>.RationalAnswerComment)"
                        HeaderText="Комментарий к рациональному ответу" />
            <GridColumn Field="@nameof(ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>.Value.Id)"
                        HeaderText="">
                <Template>
                    @{
                        var id = ((ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>)context).Value.Id;

                        <button class="btn btn-success" @onclick="@(() => EditBtnClick(id))">
                            <i class="oi oi-pencil" /> Изменить
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <AutomaticThoughtDiaryReviewEdit @ref="EditableThought" CognitiveErrors="cognitiveErrors" Emotions="emotions">
    </AutomaticThoughtDiaryReviewEdit>
}

@code {
    SfGrid<ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>> DataGrid;

    AutomaticThoughtDiaryReviewEdit EditableThought;

    private List<ThoughtRecordReview<AutomaticThoughtDiaryRecordModel>> items;
    private Dictionary<int, CognitiveErrorModel> cognitiveErrors;
    private Dictionary<int, string> emotions;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await GetCurrentUserId();

        items = await PsychologistReviewService.GetAllAutomaticDiaryRecordReviews(currentUserId, null);
        cognitiveErrors = AutomaticThoughtsService.GetAllCognitiveErrors();
        emotions = await AutomaticThoughtsService.GetAllEmotions();
    }

    public void EditBtnClick(int id)
    {
        var model = items.First(x => x.Value.Id == id); // await PsychologistReviewService.GetThreeColumnRecordReview(id);

        if (model != null)
        {
            EditableThought.Model = model;
            EditableThought.IsVisible = true;
            EditableThought.SuccessCallback = async () =>
            {
                model.State = ReviewRecordState.Reviewed;
                await Refresh();
            };
        }
    }

    public async Task SendBtnClick(int id)
    {
        await PsychologistReviewService.SendRecordToPatient(id);

        var model = items.First(x => x.Value.Id == id);
        model.SentBack = true;
    }

    private async Task Refresh()
    {
        var currentUserId = await GetCurrentUserId();

        items = await PsychologistReviewService.GetAllAutomaticDiaryRecordReviews(currentUserId, null);

        await InvokeAsync(StateHasChanged);
        await DataGrid.Refresh();
    }

    protected virtual async Task<string?> GetCurrentUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var currentUserId = UserManager.GetUserId(user);

        return currentUserId;
    }
}
