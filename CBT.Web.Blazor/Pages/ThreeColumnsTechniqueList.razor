@page "/diary/three-columns"

@using CBT.Web.Blazor.Data
@using CBT.Web.Blazor.Data.Identity;
@using CBT.Web.Blazor.Data.Model;
@using CBT.Web.Blazor.Services;

@using Microsoft.AspNetCore.Identity;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids;

@inject AutomaticThoughtsService AutomaticThoughtsService
@inject SfDialogService SfDialogService;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<User> UserManager;

@inject IJSRuntime jsRuntime;

<PageTitle>КПТ - Техника трёх колонок</PageTitle>

<h1>Техника трёх колонок</h1>

<div class="alert alert-secondary mt-4">
    Используйте технику трёх колонок каждый раз, когда у Вас портится настроение или возникает тревога.
</div>

@if (cognitiveErrors == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <button class="btn btn-primary mt-2 mb-3" @onclick="AddBtnClick">
        <i class="oi oi-plus" /> Добавить
    </button>
    <br />
    <SfGrid EnableAdaptiveUI="true" AdaptiveUIMode="AdaptiveMode.Both" DataSource="items" AllowTextWrap="true">
        <GridColumns>
            <GridColumn HeaderText=""
                        Width="60">
                <Template>
                    @{
                        var model = (ThreeColumnsRecordModel)context;
                        if (!model.Sent)
                        {
                            <button class="btn btn-success" @onclick="@(async () => await SendBtnClick(model.Id))">
                                Отправить
                            </button>
                        }
                        else
                        {
                            <text>
                                <i class="oi oi-circle-check" style="color: blue;" /> Отправлено!
                            </text>
                            if (reviewExists.TryGetValue(model.Id, out var exists) && !exists)
                            {
                                <text>
                                    <br />
                                    <i class="oi oi-circle-check" style="color: red;" /> Недоступно!
                                </text>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="@(async () => await CheckReviewBtnClick(model.Id))">
                                    Проверить
                                </button>
                            }
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(ThreeColumnsRecordModel.Thought)"
                        HeaderText="Автоматическая мысль"
                        Width="200" />
            <GridColumn Field="@nameof(ThreeColumnsRecordModel.Errors)"
                        HeaderText="Когнитивные искажения"
                        Width="200">
                <Template>
                    @{
                        var errors = ((ThreeColumnsRecordModel)context).Errors;
                        foreach (var error in errors)
                        {
                            <span>@cognitiveErrors[(int)error]</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(ThreeColumnsRecordModel.RationalAnswer)"
                        HeaderText="Рациональный ответ"
                        Width="200" />
            <GridColumn Field="@nameof(ThreeColumnsRecordModel.Id)"
                        HeaderText=""
                        Width="245">
                <Template>
                    @{
                        var id = ((ThreeColumnsRecordModel)context).Id;

                        <button class="btn btn-danger" @onclick="@(async () => await DeleteBtnClick(id))">
                            <i class="oi oi-trash" /> Удалить
                        </button>
                        <button class="btn btn-success" @onclick="@(async () => await EditBtnClick(id))">
                            <i class="oi oi-pencil" /> Изменить
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <ThreeColumnsTechniqueEdit @ref="EditableThought" CognitiveErrors="cognitiveErrors">
    </ThreeColumnsTechniqueEdit>

    <ThoughtReviewPopup @ref="ThoughtReview" CognitiveErrors="cognitiveErrors">
    </ThoughtReviewPopup>
}

@code {
    ThreeColumnsTechniqueEdit EditableThought;
    ThoughtReviewPopup ThoughtReview;

    private IEnumerable<ThreeColumnsRecordModel> items;
    private Dictionary<int, string> cognitiveErrors;

    private string? currentUserId;

    private Dictionary<int, bool> reviewExists;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        currentUserId = UserManager.GetUserId(user);

        items = await AutomaticThoughtsService.GetAllThoughts(currentUserId);
        cognitiveErrors = AutomaticThoughtsService.GetAllCognitiveErrors();

        reviewExists = new Dictionary<int, bool>();
    }

    public void AddBtnClick()
    {
        if (EditableThought.IsEdit == true)
        {
            EditableThought.Model = new ThreeColumnsRecordModel();
        }

        EditableThought.IsEdit = false;
        EditableThought.IsVisible = true;
        EditableThought.SuccessCallback = async () => await Refresh();
    }

    public async Task DeleteBtnClick(int id)
    {
        var confirmed = await SfDialogService.ConfirmAsync("Вы действительно хотите удалить запись?", "Подтверждение действия", new()
            {
                ShowCloseIcon = true,
                PrimaryButtonOptions = new()
                {
                    IconCss = "oi oi-trash"
                },
                CancelButtonOptions = new()
                {
                    Content = "Отмена",
                }
            });

        if (confirmed)
        {
            await AutomaticThoughtsService.DeleteThought(id);
            await Refresh();
        }
    }

    public async Task EditBtnClick(int id)
    {
        var model = await AutomaticThoughtsService.GetThought(id);
        if (model != null)
        {
            EditableThought.Model = model;
            EditableThought.IsEdit = true;
            EditableThought.IsVisible = true;
            EditableThought.SuccessCallback = async () => await Refresh();
        }
    }

    public async Task SendBtnClick(int id)
    {
        await AutomaticThoughtsService.SendThoughtToPsychologist(id);

        items.First(x => x.Id == id).Sent = true;
    }

    public async Task CheckReviewBtnClick(int id)
    {
        var review = await AutomaticThoughtsService.GetPsychologistReview(id);
        if (review != null)
        {
            ThoughtReview.Model = review;
            ThoughtReview.IsVisible = true;
            reviewExists[id] = true;
        }
        else
        {
            reviewExists[id] = false;
        }
    }

    private async Task Refresh()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var currentUserId = UserManager.GetUserId(user);

        items = await AutomaticThoughtsService.GetAllAutomaticThoughts(currentUserId);
    }
}
