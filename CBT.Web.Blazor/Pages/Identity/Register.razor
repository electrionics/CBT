@page "/account/register"

@using System.Text.Json;
@using System.Text;
@using System.Security.Claims;

@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Http;
@using Microsoft.AspNetCore.Identity;

@using CBT.Web.Blazor.Common
@using CBT.Web.Blazor.Data.Identity;
@using CBT.Web.Blazor.Data.Model.Enums
@using CBT.Web.Blazor.Data.Model.Identity;
@using CBT.Web.Blazor.Data.Model.Validators
@using CBT.Web.Blazor.Services.Authentication;

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;

@inject SignInManager<User> _signInManager;
@inject IJSRuntime JSRuntime;

<PageTitle>Псионик - Регистрация</PageTitle>

<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Model" OnValidSubmit="Submit">
                <h2>Зарегистрируйтесь для пользования системой.</h2>
                <hr />
                <FluentValidationValidator TValidator="RegisterModelValidator" />
                <ValidationSummary />
                @if (LastServerErrorMessage != null)
                {
                    <div class="form-floating mb-3 validation-message">
                        @LastServerErrorMessage
                    </div>
                }
                <div class="form-floating mb-3">
                    <div>
                        <label class="form-label">Тип пользователя</label>
                    </div>
                    <InputRadioGroup @bind-Value="Model.RoleType" TValue="RoleType" id="role" class="form-control" aria-required="true">
                        <ChildContent>
                            <div>
                                <label>
                                    <InputRadio id="client" Value="@RoleType.Client" />
                                    Клиент
                                </label>
                            </div>
                            <div>
                                <label>
                                    <InputRadio id="psy" Value="@RoleType.Psychologist" />
                                    Психолог
                                </label>
                            </div>
                        </ChildContent>
                    </InputRadioGroup>
                    <ValidationMessage For="@(() => Model.RoleType)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Name" id="name" class="form-control" aria-required="true" placeholder="Имя Пользователя" />
                    <label for="name" class="form-label">Имя Пользователя</label>
                    <ValidationMessage For="@(() => Model.Name)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="Электронная почта" />
                    <label for="email" class="form-label">Электронная почта</label>
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Model.Password" id="password" class="form-control" aria-required="true" placeholder="Пароль" />
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Model.ConfirmPassword" id="confirm-password" class="form-control" aria-required="true" placeholder="Подтвердите пароль" />
                    <label for="confirm-password" class="form-label">Подтвердите пароль</label>
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
                <div>
                    <button id="register-submit" type="submit" class="w-100 btn btn-lg btn-primary">Зарегистрироваться</button>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Используйте внешнюю службу для регистрации.</h3>
            <hr />
            <div>
                <p>
                    Внешние службы входа в систему в разработке.
                </p>
            </div>
        </section>
    </div>
</div>

@code {
    private RegisterModel Model { get; set; }
    private string? LastServerErrorMessage { get; set; }

    private string returnUrl;
    private IList<AuthenticationScheme> ExternalLogins { get; set; }

    private EditContext editContext;
    private ValidationMessageStore messageStore;


    protected override async Task OnInitializedAsync()
    {
        Model = new();

        editContext = new EditContext(Model);
        messageStore = new(editContext);

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    public async Task Submit()
    {
        returnUrl = NavigationManager.BaseUri;
        LastServerErrorMessage = null;

        var client = ClientFactory.CreateClient();
        var apiUrl = NavigationManager.ToAbsoluteUri("api/account/register");

        var result = await client.PostResultAsJsonAsync<RegisterResult, RegisterModel>(apiUrl, Model);

        if (result.Value?.Succeeded ?? false)
        {
            var cookies = result.Headers.Where(x => x.Key == "Set-Cookie");
            var authCookie = cookies.First().Value.First();
            authCookie = authCookie.Replace(" httponly", ""); //authCookie = authCookie.Replace(" secure; samesite=lax; httponly", "");
            await JSRuntime.InvokeVoidAsync("writeAuthCookie", authCookie);

            NavigationManager.NavigateTo(returnUrl, true);
        }
        else
        {
            // messageStore.Add(() => Model, result?.ErrorMessage ?? "Ошибка на сервере.");
            // editContext.NotifyValidationStateChanged();
            LastServerErrorMessage = result.Value?.ErrorMessage ?? "Ошибка на сервере.";
        }
    }
}