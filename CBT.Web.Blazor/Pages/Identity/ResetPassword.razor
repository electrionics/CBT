@page "/account/resetpassword";

@using CBT.Web.Blazor.Data.Identity;
@using Microsoft.AspNetCore.Identity;
@using Syncfusion.Blazor.Inputs;

@using CBT.Web.Blazor.Common;
@using CBT.Web.Blazor.Data.Model.Identity;
@using CBT.Web.Blazor.Data.Model.Validators;

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;
@inject SignInManager<User> SignInManager;
@inject UserManager<User> UserManager;
@inject SfDialogService SfDialogService;

<h1>Изменение пароля</h1>
<h2>Измените свой пароль.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="Submit">
            <FluentValidationValidator TValidator="ResetPasswordModelValidator" />
            <ValidationSummary />
            @if (LastServerErrorMessage != null)
            {
                <div class="form-floating mb-3 validation-message">
                    @LastServerErrorMessage
                </div>
            }
            <div class="form-floating mb-3">
                <InputText class="hidden"
                           ID="code"
                           @bind-Value="Model.Code" />
                <ValidationMessage For="@(() => Model.Code)" />
                <button class="oi oi-code" @onclick="GenerateCode">Получить код</button>
            </div>
            <input value="@Model.Code" type="hidden" />
            <div class="form-floating mb-3">
                <div for="email" class="form-label">Электронная почта <span class="oi oi-shield" id="infoEmail"></span></div>
                <SfTextBox Type="InputType.Email" 
                    Autocomplete="AutoComplete.On"
                    FloatLabelType="FloatLabelType.Never"
                    Placeholder="Электронная почта"
                    ID="email"
                    @bind-Value="Model.Email" />
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            <div class="form-floating mb-3">
                <div for="password" class="form-label">Пароль (от 8 символов) <span class="oi oi-shield" id="shieldPassword"></span></div>
                    <SfTextBox Type="InputType.Password" 
                               Autocomplete="AutoComplete.On"
                               FloatLabelType="FloatLabelType.Never"
                               OnInput="async () => await PasswordChanged()"
                               Placeholder="Пароль"
                               ID="password"
                               @bind-Value="Model.Password"  />
                    <SfTooltip Position="Position.RightCenter"
                               Target="#shieldPassword"
                               CssClass="fontTooltip"
                               Content="Должен содержать не менее 8 символов в длину. Мы не храним пароль в открытом виде.">
                    </SfTooltip>
                    @if ((Model.Password ?? string.Empty).Length < 8)
                    {
                        <div class="oi oi-x" style="color: red;"> Слабый</div>
                    }
                    else if ((Model.Password ?? string.Empty).Length < 12)
                    {
                        <div class="oi oi-circle-check" style="color: orange;"> Надежный</div>
                    }
                    else
                    {
                        <div class="oi oi-circle-check" style="color: green;"> Очень надежный</div>
                    }
                    <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="form-floating mb-3">
                <div for="confirm-password" class="form-label">Подтвердите пароль</div>
                <SfTextBox Type="InputType.Password"
                           Autocomplete="AutoComplete.Off"
                           FloatLabelType="FloatLabelType.Never"
                           @bind-Value="Model.ConfirmPassword"
                           id="confirm-password"
                           placeholder="Подтвердите пароль" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Изменить</button>
        </EditForm>
    </div>
</div>

@code{
    public ResetPasswordModel Model { get; set; }

    private string? LastServerErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
    }

    public async Task Submit()
    {
        LastServerErrorMessage = null;

        var client = ClientFactory.CreateClient();
        var apiUrl = NavigationManager.ToAbsoluteUri("api/account/resetpassword");

        var result = await client.PostResultAsJsonAsync<ResetPasswordResult, ResetPasswordModel>(apiUrl, Model);

        if (result.Value?.Success ?? false)
        {
            var navigateUrl = NavigationManager.ToAbsoluteUri("/account/resetpassword/confirmation");
            NavigationManager.NavigateTo(navigateUrl.ToString(), true);
        }
        else
        {
            // messageStore.Add(() => Model, result?.ErrorMessage ?? "Ошибка на сервере.");
            // editContext.NotifyValidationStateChanged();
            LastServerErrorMessage = string.IsNullOrEmpty(result.Value?.ErrorMessage) 
                ? "Ошибка на сервере."
                : result.Value?.ErrorMessage;
        }
    }

    public async Task GenerateCode()
    {
        LastServerErrorMessage = null;

        if (Model.Code != null)
            return;

        var user = await UserManager.FindByEmailAsync(Model.Email);

        if (user != null)
        {
            //var code = await UserManager.GeneratePasswordResetTokenAsync(user);
            // var client = ClientFactory.CreateClient();
            // var apiUrl = NavigationManager.ToAbsoluteUri($"api/account/resetpassword?code={code}");

            try
            {
                //var result = await client.GetFromJsonAsync<ResetPasswordModel>(apiUrl);
                Model.Code = await UserManager.GeneratePasswordResetTokenAsync(user);
            }
            catch(Exception e)
            {
                LastServerErrorMessage = "Произошла ошибка.";
            }
        }
        else
        {
            LastServerErrorMessage = "Пользователь не найден. Введите корректный адрес электронной почты.";
        }
    }

    public async Task PasswordChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
}