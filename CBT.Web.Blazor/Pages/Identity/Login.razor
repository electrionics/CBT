@page "/account/login"

@using System.Text.Json;
@using System.Text;
@using System.Security.Claims;

@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Http;
@using Microsoft.AspNetCore.Identity;

@using CBT.Web.Blazor.Common
@using CBT.Web.Blazor.Data.Identity;
@using CBT.Web.Blazor.Data.Model.Identity;
@using CBT.Web.Blazor.Data.Model.Validators
@using CBT.Web.Blazor.Services.Authentication;

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;

@inject SignInManager<User> _signInManager;
@inject IJSRuntime JSRuntime;

<PageTitle>Псионик - Вход в систему</PageTitle>

<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Model" OnValidSubmit="Submit">
                <h2>Используйте созданный аккаунт для входа.</h2>
                <hr />
                <FluentValidationValidator TValidator="LoginModelValidator" />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="Имя Пользователя" />
                    <label for="email" class="form-label">Электронная почта</label>
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Model.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Пароль" />
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Войти</button>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Используйте внешнюю службу для входа.</h3>
            <hr />
            <div>
                <p>
                    Внешние службы входа в систему в разработке.
                </p>
            </div>
        </section>
    </div>
</div>

@code{
    private LoginModel Model { get; set; }

    private string returnUrl;
    private IList<AuthenticationScheme> ExternalLogins { get; set; }

    private EditContext editContext;
    private ValidationMessageStore messageStore;


    protected override async Task OnInitializedAsync()
    {
        Model = new();

        editContext = new EditContext(Model);
        messageStore = new(editContext);

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    public async Task Submit()
    {
        returnUrl = NavigationManager.BaseUri;

        var apiUrl = NavigationManager.ToAbsoluteUri("api/account/login");
        var client = ClientFactory.CreateClient();

        var result = await client.PostResultAsJsonAsync<LoginResult, LoginModel>(apiUrl, Model);
        if (result.Value?.Succeeded ?? false)
        {
            var cookies = result.Headers.Where(x => x.Key == "Set-Cookie");
            var authCookie = cookies.First().Value.First();
            authCookie = authCookie.Replace(" httponly", ""); //authCookie = authCookie.Replace(" secure; samesite=lax; httponly", "");
            await JSRuntime.InvokeVoidAsync("writeAuthCookie", authCookie);

            NavigationManager.NavigateTo(returnUrl, true);
        }
        else if (result.Value?.RequiresTwoFactor ?? false)
        {
            throw new NotImplementedException();
            //NavigationManager.NavigateTo($"./LoginWith2fa?ReturnUrl={returnUrl}&RememberMe={Model.RememberMe}");
        }
        else if (result.Value?.IsLockedOut ?? false)
        {
            throw new NotImplementedException();
            //NavigationManager.NavigateTo("./Lockout");
        }
        else
        {
            messageStore.Add(() => Model, "Неудачная попытка входа.");
        }
    }
}