@using Microsoft.AspNetCore.Identity;

@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;

@inject DiariesFacade DiariesFacade;
@inject BaseAuthenticationStateProvider GetAuthenticationStateAsync;
@inject UserManager<User> UserManager;

<SfDialog Width="500px" IsModal="true" @bind-Visible="@IsVisible" ShowCloseIcon="true" ID="EditThought">
    <DialogEvents Opened="Opened"></DialogEvents>
    <DialogTemplates>
        <Header>
            @(IsEdit ? "Дополнить" : "Добавить") запись
        </Header>
        <Content>
            <div class="mb-4">
                <label for="situation" class="form-label">Дата</label>
                <SfDatePicker @bind-Value="Model.PlanDate" Placeholder="Запланировано на дату" aria-describedby="plandateHelp" />
                <textarea @bind="Model.PlanDate" class="form-control" id="plandate" aria-describedby="plandateHelp"></textarea>
                <div id="plandateHelp" class="form-text">Выберите дату, на которую запланировано задание.</div>
            </div>
            <div class="mb-4">
                <label for="situation" class="form-label">Задание</label>
                <input type="text" @bind="Model.Task" class="form-control" id="task" aria-describedby="taskHelp"></input>
                <div id="taskHelp" class="form-text">Опишите задание, которые Вам необходимо выполнить.</div>
            </div>
            <div class="mb-4">
                <label for="supposedEffort" class="form-label">Предполагаемая трудность</label>
                <SfSlider @ref="sliderSupposedEffort" Type="SliderType.MinRange" @bind-Value="@Model.SupposedEffort" Min="0" Max="100" Step="1">
                    <SliderTicks Placement="Placement.After" LargeStep="5"></SliderTicks>
                </SfSlider>
            </div>
            <div class="mb-4">
                <label for="supposedPleasure" class="form-label">Предполагаемое удовольствие</label>
                <SfSlider @ref="sliderSupposedPleasure" Type="SliderType.MinRange" @bind-Value="@Model.SupposedPleasure" Min="0" Max="100" Step="1">
                    <SliderTicks Placement="Placement.After" LargeStep="5"></SliderTicks>
                </SfSlider>
            </div>
            <div class="mb-4">
                <label for="actualEffort" class="form-label">Действительная трудность</label>
                <SfSlider @ref="sliderActualEffort" Type="SliderType.MinRange" @bind-Value="@Model.ActualEffort" Min="0" Max="100" Step="1">
                    <SliderTicks Placement="Placement.After" LargeStep="5"></SliderTicks>
                </SfSlider>
            </div>
            <div class="mb-4">
                <label for="actualPleasure" class="form-label">Действительное удовольствие</label>
                <SfSlider @ref="sliderActualPleasure" Type="SliderType.MinRange" @bind-Value="@Model.ActualPleasure" Min="0" Max="100" Step="1">
                    <SliderTicks Placement="Placement.After" LargeStep="5"></SliderTicks>
                </SfSlider>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="@(IsEdit ? "Сохранить" : "Добавить")" IsPrimary="true" CssClass="btn btn-success"
                      OnClick="SaveButtonClick" />
        <DialogButton Content="Отмена"
                      OnClick="CloseBtnClick" />
    </DialogButtons>
</SfDialog>

@code {
    private SfSlider<int?> sliderSupposedEffort { get; set; }
    private SfSlider<int?> sliderSupposedPleasure { get; set; }
    private SfSlider<int?> sliderActualEffort { get; set; }
    private SfSlider<int?> sliderActualPleasure { get; set; }

    public bool IsEdit { get; set; }

    public bool IsVisible { get; set; } = false;

    public AntiProcrastinationDiaryRecordModel Model { get; set; }

    public Action? SuccessCallback { get; set; }

    private void Initialize()
    {
    }

    #region Fix Sliders Initialization In Popup

    protected override void OnInitialized()
    {
        Initialize();

        base.OnInitialized();
    }

    public void Opened()
    {
        sliderSupposedEffort.RepositionAsync();
        sliderSupposedPleasure.RepositionAsync();
        sliderActualEffort.RepositionAsync();
        sliderActualPleasure.RepositionAsync();
    }

    #endregion

    private void CloseBtnClick()
    {
        IsVisible = false;
    }

    private async Task SaveButtonClick()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var currentUserId = UserManager.GetUserId(user);

        if (IsEdit)
        {
            await DiariesFacade.EditAntiprocrastinationRecordFull(Model, currentUserId);
        }
        else
        {
            await DiariesFacade.AddAntiprocrastinationRecordFull(Model, currentUserId);
        }

        Model = new AntiProcrastinationDiaryRecordModel();

        if (SuccessCallback != null)
        {
            SuccessCallback();
        }

        IsVisible = false;
    }
}