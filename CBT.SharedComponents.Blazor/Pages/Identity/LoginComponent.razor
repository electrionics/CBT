@using System.Text.Json;
@using System.Text;
@using System.Security.Claims;

@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;

@using CBT.Domain.Identity

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;
@inject UserManager<User> UserManager;

@inject SignInManager<User> _signInManager;
@inject JsInterop JsInterop;
@inject SfDialogService SfDialogService;
@inject ApiConfig ApiConfig;
@inject BaseAuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Псионик - Вход в систему</PageTitle>

<Loading @ref="Loader" />

<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Model" OnValidSubmit="Submit">
                <h2>Используйте созданный аккаунт для входа.</h2>
                <hr />
                <FluentValidationValidator TValidator="LoginModelValidator" />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="Имя Пользователя" />
                    <label for="email" class="form-label">Электронная почта</label>
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Model.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Пароль" />
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Войти</button>
                </div>
                <div>
                    <br/>
                    <a href="/account/resetpassword">Забыли пароль?</a>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Используйте внешнюю службу для входа.</h3>
            <hr />
            <div>
                <p>
                    Внешние службы входа в систему в разработке.
                </p>
            </div>
        </section>
    </div>
</div>

@code {
    Loading Loader;

    private LoginModel Model { get; set; }

    private string? LastServerErrorMessage { get; set; }
    private IList<AuthenticationScheme> ExternalLogins { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Model = new();

        ExternalLogins = (await _signInManager
            .GetExternalAuthenticationSchemesAsync())
            .ToList();
    }

    public async Task Submit()
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        LastServerErrorMessage = null;

        var client = ClientFactory.CreateClient();
        var apiUrl = ApiConfig.ApiEndpointBaseUrl + "/account/login";
        var result = await client.PostResultAsJsonAsync<LoginResult, LoginModel>(apiUrl, Model);

        if (result.Value?.Succeeded ?? false)
        {
            await AuthenticationStateProvider.Login(Model.Email);
            await JsInterop.WriteAuth(result);

            NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
        }
        else if (result.Value?.RequiresTwoFactor ?? false)
        {
            throw new NotImplementedException();
            //NavigationManager.NavigateTo($"./LoginWith2fa?ReturnUrl={returnUrl}&RememberMe={Model.RememberMe}");
        }
        else if (result.Value?.IsLockedOut ?? false)
        {
            LastServerErrorMessage = "Пользователь заблокирован.";
            //NavigationManager.NavigateTo("./Lockout");
        }
        else
        {
            var user = await UserManager.FindByNameAsync(Model.Email);
            if (user != null &&
                !await UserManager.IsEmailConfirmedAsync(user))
            {
                NavigationManager.NavigateTo("/account/register/confirmation/resend", true);
            }
            else
            {
                LastServerErrorMessage = "Неудачная попытка входа.";
            }
        }

        if (LastServerErrorMessage != null)
        {
            await SfDialogService.AlertAsync("Ошибка входа.", LastServerErrorMessage);
        }
    }
}