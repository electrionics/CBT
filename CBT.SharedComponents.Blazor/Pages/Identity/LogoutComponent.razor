@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Logging


@inject BaseAuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<User> _signInManager;
@inject NavigationManager NavigationManager;

@inject ILogger<LogoutComponent> _logger;
@inject IHttpClientFactory ClientFactory;
@inject JsInterop JsInterop;
@inject SfDialogService SfDialogService;

@inject ApiConfig ApiConfig;

<PageTitle>Псионик - Выход из системы</PageTitle>

<Loading @ref="Loader" />

<header>
    <h1>Выход из системы</h1>
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <form class="form-inline" @onsubmit="Submit">
                    <button type="submit" class="btn btn-primary">Нажмите для выхода</button>
                </form>
            </Authorized>
            <NotAuthorized>
                <p>Вы успешно выполнили выход из системы.</p>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</header>

@code {
    Loading Loader;

    private string returnUrl;

    public async Task Submit()
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        returnUrl = NavigationManager.BaseUri;

        var client = ClientFactory.CreateClient();
        var apiUrl = ApiConfig.ApiEndpointBaseUrl + "/account/logout";
        var result = await client.PostResultAsJsonAsync<CommonResult, LogoutModel>(apiUrl, new());

        if (result.Succeeded && (result.Value?.Succeeded ?? false))
        {
            AuthenticationStateProvider.Logout();
            await JsInterop.WriteAuth(result);

            NavigationManager.NavigateTo(returnUrl, true);
        }
        else
        {
            _logger.LogError("Неудачная попытка выхода");
            await SfDialogService.AlertAsync("Ошибка.", "Не удалось выйти.");
        }
    }
}