@using System.Text;
@using System.Text.Json;
@using System.Security.Claims;

@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;

@using Syncfusion.Blazor.Inputs;

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;

@inject SignInManager<User> _signInManager;
@inject JsInterop JsInterop;

@inject BaseAuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Псионик - Регистрация</PageTitle>

<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Model" OnValidSubmit="Submit">
                <h2>Зарегистрируйтесь для пользования системой.</h2>
                <hr />
                <FluentValidationValidator TValidator="RegisterModelValidator" />
                <ValidationSummary />
                @if (LastServerErrorMessage != null)
                {
                    <div class="form-floating mb-3 validation-message">
                        @LastServerErrorMessage
                    </div>
                }
                <div class="form-floating mb-3">
                    <div class="form-label">Я хочу</div>
                    <div>
                        <InputCheckbox id="client" @bind-Value="Model.IsClient" />
                        Получать помощь <span class="oi oi-info" id="infoClient"></span>
                    </div>
                    <SfTooltip Position="Position.RightCenter" 
                               Target="#infoClient" 
                               CssClass="fontTooltip"
                               Content="Вам будет доступно ведение личных дневников и своего отслеживание прогресса.">
                    </SfTooltip>
                    <div>
                        <InputCheckbox id="psy" @bind-Value="Model.IsPsychologist" />
                        Оказывать помощь <span class="oi oi-info" id="infoPsychologist"></span>
                    </div>
                    <SfTooltip Position="Position.RightCenter"
                               Target="#infoPsychologist" 
                               CssClass="fontTooltip"
                               Content="Вам будет доступна проверка дневников ваших подопечных.">
                    </SfTooltip>
                    <ValidationMessage For="@(() => Model.RoleTypes)" />
                </div>
                <div class="form-floating mb-3">
                    <div for="name" class="form-label">Моё имя <span class="oi oi-info" id="infoName"></span></div>
                    <SfTextBox @bind-Value="Model.Name"
                               Placeholder="Моё имя"
                               ID="name" />
                    <SfTooltip Position="Position.RightCenter"
                               Target="#infoName" 
                               CssClass="fontTooltip"
                               Content="Используется для отображения на сайте.">
                    </SfTooltip>
                    <ValidationMessage For="@(() => Model.Name)" />
                </div>
                <div class="form-floating mb-3">
                    <div for="email" class="form-label">Моя электронная почта <span class="oi oi-shield" id="infoEmail"></span></div>
                    <SfTextBox Type="InputType.Email" 
                               Autocomplete="AutoComplete.On"
                               FloatLabelType="FloatLabelType.Never"
                               Placeholder="Электронная почта"
                               ID="email"
                               @bind-Value="Model.Email" />
                    <SfTooltip Position="Position.RightCenter"
                               Target="#infoEmail" 
                               CssClass="fontTooltip"
                               Content="Не показываем никому, кроме Вас.">
                    </SfTooltip>
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
                <div class="form-floating mb-3">
                    <div for="password" class="form-label">Пароль (от 8 символов) <span class="oi oi-shield" id="shieldPassword"></span></div>
                    <SfTextBox Type="InputType.Password" 
                               Autocomplete="AutoComplete.On"
                               FloatLabelType="FloatLabelType.Never"
                               OnInput="async () => await PasswordChanged()"
                               Placeholder="Пароль"
                               ID="password"
                               @bind-Value="Model.Password"  />
                    <SfTooltip Position="Position.RightCenter"
                               Target="#shieldPassword"
                               CssClass="fontTooltip"
                               Content="Должен содержать не менее 8 символов в длину. Мы не храним пароль в открытом виде.">
                    </SfTooltip>
                    @if ((Model.Password ?? string.Empty).Length < 8)
                    {
                        <div class="oi oi-x" style="color: red;"> Слабый</div>
                    }
                    else if ((Model.Password ?? string.Empty).Length < 12)
                    {
                        <div class="oi oi-circle-check" style="color: orange;"> Надежный</div>
                    }
                    else
                    {
                        <div class="oi oi-circle-check" style="color: green;"> Очень надежный</div>
                    }
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <div class="form-floating mb-3">
                    <div for="confirm-password" class="form-label">Подтвердите пароль</div>
                    <SfTextBox Type="InputType.Password"
                               Autocomplete="AutoComplete.Off"
                               FloatLabelType="FloatLabelType.Never"
                               @bind-Value="Model.ConfirmPassword" 
                               id="confirm-password"
                               placeholder="Подтвердите пароль" />
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
                <div>
                    <button id="register-submit" type="submit" class="w-100 btn btn-lg btn-primary">Зарегистрироваться</button>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Используйте внешнюю службу для регистрации.</h3>
            <hr />
            <div>
                <p>
                    Внешние службы входа в систему в разработке.
                </p>
            </div>
        </section>
    </div>
</div>

@code {
    private RegisterModel Model { get; set; }
    private string? LastServerErrorMessage { get; set; }

    private IList<AuthenticationScheme> ExternalLogins { get; set; }

    private EditContext editContext;
    private ValidationMessageStore messageStore;


    protected override async Task OnInitializedAsync()
    {
        Model = new() { IsClient = true, IsPsychologist = true };

        editContext = new EditContext(Model);
        messageStore = new(editContext);

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    public async Task Submit()
    {
        LastServerErrorMessage = null;

        var client = ClientFactory.CreateClient();
        var apiUrl = NavigationManager.ToAbsoluteUri("api/account/register");

        var result = await client.PostResultAsJsonAsync<CommonResult, RegisterModel>(apiUrl, Model);

        if (result.Value?.Succeeded ?? false)
        {
            await AuthenticationStateProvider.Login(Model.Email);
            await JsInterop.WriteAuth(result);

            var navigateUrl = NavigationManager.ToAbsoluteUri($"account/register/confirmation?email={Model.Email}");
            NavigationManager.NavigateTo(navigateUrl.ToString(), true);
        }
        else
        {
            // messageStore.Add(() => Model, result?.ErrorMessage ?? "Ошибка на сервере.");
            // editContext.NotifyValidationStateChanged();
            LastServerErrorMessage = result.Value?.ErrorMessage ?? "Ошибка на сервере.";
        }
    }

    public async Task PasswordChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
}