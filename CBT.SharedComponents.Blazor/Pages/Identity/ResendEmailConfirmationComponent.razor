@using Syncfusion.Blazor.Inputs;

@inject IHttpClientFactory ClientFactory;
@inject NavigationManager NavigationManager;

<PageTitle>Псионик - Повторное подтверждение почты</PageTitle>

<h1>Повторное подтверждение почты</h1>
<h2>Введите вашу почту.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="Submit">
            <FluentValidationValidator TValidator="ResendConfirmationModelValidator" />
            <ValidationSummary />
            @if (LastServerErrorMessage != null)
            {
                <div class="form-floating mb-3 validation-message">
                    @LastServerErrorMessage
                </div>
            }
            <div class="form-floating mb-3">
                <div for="email" class="form-label">Электронная почта <span class="oi oi-shield" id="infoEmail"></span></div>
                <SfTextBox Type="InputType.Email" 
                    Autocomplete="AutoComplete.On"
                    FloatLabelType="FloatLabelType.Never"
                    Placeholder="Электронная почта"
                    ID="email"
                    @bind-Value="Model.Email" />
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Отправить подтверждение</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; }

    private ResendConfirmationModel Model { get; set; }

    private string? LastServerErrorMessage { get; set; }


    protected override void OnInitialized()
    {
        Model = new();

        if (!string.IsNullOrEmpty(Email))
        {
            Model.Email = Email;
        }
    }

    public async Task Submit()
    {
        LastServerErrorMessage = null;

        var client = ClientFactory.CreateClient();
        var apiUrl = NavigationManager.ToAbsoluteUri($"api/account/register/confirmation/resend");

        var result = await client.PostResultAsJsonAsync<ResendConfirmationResult, ResendConfirmationModel>(apiUrl, Model);

        if (result.Value?.Success ?? false)
        {
            var navigateUrl = NavigationManager.ToAbsoluteUri("account/login");
            NavigationManager.NavigateTo(navigateUrl.ToString(), true);
        }
        else
        {
            LastServerErrorMessage = result.Value?.ErrorMessage ?? "Ошибка на сервере.";
        }
    }
}