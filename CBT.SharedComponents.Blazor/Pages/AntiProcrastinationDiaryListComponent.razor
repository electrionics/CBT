@using Microsoft.AspNetCore.Identity;

@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids;

@inject DiariesFacade DiariesFacade;
@inject SfDialogService SfDialogService;
@inject BaseAuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<User> UserManager;

<PageTitle>Псионик - Мои задачи</PageTitle>

<h1>Мои задачи</h1>

<div class="alert alert-secondary mt-4">
    Приветствую тебя на странице дневника антипрокрастинации. Здесь ты можешь добавлять новые задачи в список,
    изменять статус и отслеживать прогресс выполнения. Это важная часть, 
    поскольку именно сделанные дела являются доказательством того, что твое поведение меняется. А значит, меняешься и ты!
    Рекомендую создавать задачи на основе записей из дневников:
    <ul>
        <li>
            <a href="/diary/three-columns">Техника трёх колонок</a>,
            <a href="/diary/automatic-thoughts">Дневник автоматических мыслей</a>.
        </li>
    </ul>
    <br />
    @{
        if (!ReadOnly)
        {
            <NavLink class="nav-link" href="diary/automatic-thoughts/example">
                <span class="oi oi-list-rich" aria-hidden="true"></span>  Примеры проработок "Дневника автоматических мыслей"
            </NavLink>
            <NavLink class="nav-link" href="diary/automatic-thoughts/report">
                <span class="oi oi-bar-chart" aria-hidden="true"></span>  Мой отчет когнитивных ошибок и эмоций
            </NavLink>
        }
        else
        {
            <NavLink class="nav-link" href="diary/automatic-thoughts/report/example">
                <span class="oi oi-bar-chart" aria-hidden="true"></span>  Пример отчета когнитивных ошибок и эмоций
            </NavLink>
        }
    }
</div>

@if (items == null)
{
    <Loading Visible="true"/>
}
else
{
    <div class="alert alert-secondary mt-4">
        Всего @(items.Count) записей.
        <SfButton IconCss="oi oi-plus" Content="Добавить" IsPrimary="true" @onclick="async () => await AddBtnClick()" CssClass="@(!ReadOnly? "" : "hidden")" />
    </div>
    @code{
        private string? activeBreakpoint;
        private RowDirection rowDirection;
    }
    <SfMediaQuery @bind-ActiveBreakpoint="activeBreakpoint"></SfMediaQuery>
    @if (activeBreakpoint == "Medium" || activeBreakpoint == "Small")
    {
        rowDirection = RowDirection.Vertical;
    }
    else
    {
        rowDirection = RowDirection.Horizontal;
    }
    <SfGrid @ref="DataGrid" 
            EnableAdaptiveUI="true" 
            AdaptiveUIMode="AdaptiveMode.Both" 
            RowRenderingMode="@rowDirection" 
            Height="100%" 
            Width="100%" 
            DataSource="items" 
            AllowTextWrap="true" 
            AllowPaging="true"
            AllowSorting="true"
            AllowFiltering="true">
        <GridPageSettings PageSize="25"></GridPageSettings>
        <GridFilterSettings Type="FilterType.Excel"></GridFilterSettings>
        <GridColumns>
            <GridColumn 
                Visible="!ReadOnly" 
                HeaderText=""
                AllowFiltering="false"
                AllowSorting="false">
                <Template>
                    @{
                        var model = (AutomaticThoughtDiaryRecordModel)context;
                        if (!model.Sent)
                        {
                            <button class="btn btn-success" @onclick="@(async () => await SendBtnClick(model.Id))">
                                Психологу
                            </button>
                        }
                        else
                        {
                            <text>
                                <i class="oi oi-circle-check" style="color: blue;" /> Отправлено!
                            </text>
                            if (reviewExists.TryGetValue(model.Id, out var exists) && !exists)
                            {
                                <text>
                                    <br/>
                                    <i class="oi oi-circle-check" style="color: red;" /> В обработке!
                                </text>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="@(async () => await CheckReviewBtnClick(model.Id))">
                                    Проверить
                                </button>
                            }
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn 
                Field="@nameof(AutomaticThoughtDiaryRecordModel.Situation)"
                HeaderText="Ситуация"
                AllowFiltering="true"
                AllowSorting="false" />
            <GridColumn 
                Field="@nameof(AutomaticThoughtDiaryRecordModel.BeginningEmotionValues)"
                HeaderText="Эмоции"
                AllowFiltering="false"
                AllowSorting="false">
                <Template>
                    @{
                        var recordEmotions = ((AutomaticThoughtDiaryRecordModel)context).BeginningEmotionValues;
                        foreach (var emotion in recordEmotions)
                        {
                            <span class="emotion @(emotions[emotion.Key].Positive ? "positive" : "negative")">@emotions[emotion.Key].Name - @(emotion.Value)%</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(AutomaticThoughtDiaryRecordModel.Thought)"
                HeaderText="Автоматическая мысль"
                AllowFiltering="true"
                AllowSorting="false"/>
            <GridColumn Field="@nameof(AutomaticThoughtDiaryRecordModel.Errors)"
                HeaderText="Когнитивные искажения"
                AllowFiltering="false"
                AllowSorting="false">
                <Template>
                    @{
                        var errors = ((AutomaticThoughtDiaryRecordModel)context).Errors;
                        foreach (var error in errors)
                        {
                            <span>@cognitiveErrors[(int)error].Title</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(AutomaticThoughtDiaryRecordModel.RationalAnswer)"
                HeaderText="Рациональный ответ"
                AllowFiltering="true"
                AllowSorting="false"/>
            <GridColumn Field="@nameof(AutomaticThoughtDiaryRecordModel.ResultingEmotionValues)"
                HeaderText="Результат"
                AllowFiltering="false"
                AllowSorting="false">
                <Template>
                    @{
                        var recordEmotions = ((AutomaticThoughtDiaryRecordModel)context).ResultingEmotionValues;
                        foreach (var emotion in recordEmotions)
                        {
                            <span class="emotion @(emotions[emotion.Key].Positive ? "positive" : "negative")">@emotions[emotion.Key].Name - @(emotion.Value)%</span>
                            <br />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn 
                Visible="!ReadOnly" 
                Field="@nameof(AutomaticThoughtDiaryRecordModel.Id)"
                HeaderText=""
                AllowFiltering="true"
                AllowSorting="true">
                <Template>
                    @{
                        var id = ((AutomaticThoughtDiaryRecordModel)context).Id;

                        <button class="btn btn-danger" @onclick="@(async () => await DeleteBtnClick(id))">
                            <i class="oi oi-trash" /> Удалить
                        </button>
                        <button class="btn btn-success" @onclick="@(async () => await EditBtnClick(id))">
                            <i class="oi oi-pencil" /> Изменить
                        </button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <AutomaticThoughtDiaryEditComponent @ref="EditableThought" CognitiveErrors="cognitiveErrors" Emotions="emotions">
    </AutomaticThoughtDiaryEditComponent>

    <ThoughtReviewPopupComponent @ref="ThoughtReview" CognitiveErrors="cognitiveErrors">
    </ThoughtReviewPopupComponent>
}

@code {
    Loading Loader;

    SfGrid<AutomaticThoughtDiaryRecordModel> DataGrid;

    AutomaticThoughtDiaryEditComponent EditableRecord;
    ThoughtReviewPopupComponent RecordReview;

    private List<AntiProcrastinationDiaryRecordModel> items;

    private Dictionary<int, bool> reviewExists;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await GetCurrentUserId();

        await InitShowButtons();

        items = await DiariesFacade.GetAllAntiprocrastinationRecords(currentUserId);

        reviewExists = new Dictionary<int, bool>();
    }

    #region Event Handlers

    public async Task AddBtnClick()
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        EditableThought.Model = new AntiProcrastinationDiaryRecordModel();

        EditableThought.IsEdit = false;
        EditableThought.IsVisible = true;

        EditableThought.SuccessCallback = async () => await Refresh();
    }

    public async Task DeleteBtnClick(int id)
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        var confirmed = await SfDialogService.ConfirmAsync("Вы действительно хотите удалить запись?", "Подтверждение действия", new ()
        {
            ShowCloseIcon = true,
            PrimaryButtonOptions = new()
            {
                IconCss = "oi oi-trash"
            },
            CancelButtonOptions = new()
            {
                Content = "Отмена",
            }
        });

        if (confirmed)
        {
            await AutomaticThoughtsService.DeleteThought(id);
            await Refresh();
        }
    }

    public async Task EditBtnClick(int id)
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        var model = await AutomaticThoughtsService.GetAutomaticThought(id);
        if (model != null)
        {
            EditableThought.Model = model;
            EditableThought.IsEdit = true;
            EditableThought.IsVisible = true;
            EditableThought.SuccessCallback = async () => await Refresh();
        }
    }


    public async Task SendBtnClick(int id)
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        await AutomaticThoughtsService.SendThoughtToPsychologist(id);

        items.First(x => x.Id == id).Sent = true;
    }

    public async Task CheckReviewBtnClick(int id)
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        var reviews = await AutomaticThoughtsService.GetPsychologistReviews(id);
        if (reviews?.Any() ?? false)
        {
            ThoughtReview.Model = reviews;
            ThoughtReview.IsVisible = true;
            reviewExists[id] = true;
        }
        else
        {
            reviewExists[id] = false;
        }
    }

    private async Task Refresh()
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        var currentUserId = await GetCurrentUserId();

        items = await AutomaticThoughtsService.GetAllAutomaticThoughts(currentUserId);

        await InvokeAsync(StateHasChanged);
        await DataGrid.Refresh();
    }

    #endregion

    protected virtual async Task<string?> GetCurrentUserId()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var currentUserId = UserManager.GetUserId(user);

        return currentUserId;
    }

    protected virtual bool ReadOnly => _readOnly;

    private bool _readOnly;

    private async Task<bool> InitShowButtons() => _readOnly = await GetCurrentUserId() == null;
}