@using System.Timers;
@using System.Net.Http.Json;

@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;

<SfToast ID="toast_default" @ref="ToastObj" Title="Привязка пользователя" Content="@Message" Timeout="@MillisecondsToRedirect" Icon="e-meeting">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {
    private const int MillisecondsToRedirect = 3000;

    [SupplyParameterFromQuery(Name = "publicId")]
    private string? PublicId { get; set; }

    private SfToast ToastObj { get; set; }
    private string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PublicId == null)
        {
            Message = "Неверная ссылка";
        }
        else
        {
            try
            {
                var client = ClientFactory.CreateClient();
                var apiUrl = NavigationManager.ToAbsoluteUri($"/api/linking/process?publicId={PublicId}");
                var result = await client.GetFromJsonAsync<CommonResult>(apiUrl);

                if (result!.Succeeded)
                {
                    Message = "Пользователь успешно привязан";
                }
                else
                {
                    Message = result.ErrorMessage!;
                }
            }
            catch (Exception ex)
            {
                Message = "Ошибка при попытке привязать пользователя";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ToastObj.ShowAsync();

        var timer = new Timer();
        timer.Interval = MillisecondsToRedirect;
        timer.Elapsed += (object? sender, ElapsedEventArgs e) =>
        {
            timer.Stop();
            NavigationManager.NavigateTo("/profile", true);
        };

        timer.Start();
    }
}
