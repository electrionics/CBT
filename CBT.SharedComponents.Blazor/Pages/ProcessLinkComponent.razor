@using System.Timers;
@using System.Net.Http.Json;

@using Microsoft.AspNetCore.Identity

@using CBT.SharedComponents.Blazor.Model.ResultData

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory ClientFactory;
@inject ApiConfig ApiConfig;
@inject JsInterop JsInterop;

<PageTitle>Псионик - Привязка пользователя</PageTitle>

<Loading 
    Text="Ожидайте, вы будете перенаправлены..." 
    Visible="true" />

<SfToast ID="toast_default" @ref="ToastObj" Title="Привязка пользователя" Content="@Message" Timeout="@MillisecondsToRedirect" Icon="e-meeting">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {
    private const int MillisecondsToRedirect = 4000;

    [SupplyParameterFromQuery(Name = "publicId")]
    private string? PublicId { get; set; }

    private SfToast ToastObj { get; set; }
    private string Message { get; set; }

    private string? RedirectUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PublicId == null)
        {
            Message = "Неверная ссылка.";
        }
        else
        {
            try
            {
                var client = ClientFactory.CreateClient();
                var apiUrl = ApiConfig.ApiEndpointBaseUrl + $"/linking/process?publicId={PublicId}";
                var result = await client.GetFromJsonAsync<CommonResult<LinkProcessingResultData>>(apiUrl);

                RedirectUrl = result!.RedirectUrl;

                if (result!.Succeeded)
                {
                    Message = "Пользователь успешно привязан.";
                }
                else
                {
                    if (result!.Data?.LinkPublicId != null && RedirectUrl != null)
                    {
                        Message = "Войдите в систему, затем перейдите по ссылке повторно.";
                    }
                    else
                    {
                        Message = result.ErrorMessage!;
                    }
                }
            }
            catch (Exception)
            {
                Message = "Ошибка при попытке привязать пользователя.";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ToastObj.ShowAsync();

        var timer = new Timer();
        timer.Interval = MillisecondsToRedirect;
        timer.Elapsed += (object? sender, ElapsedEventArgs e) =>
        {
            timer.Stop();
            NavigationManager.NavigateTo(RedirectUrl ?? "/profile", true);
        };

        timer.Start();
    }
}
