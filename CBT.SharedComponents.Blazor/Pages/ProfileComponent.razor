@using System.Timers;
@using Microsoft.AspNetCore.Identity

@using Syncfusion.Blazor.Inputs

@inject BaseAuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager;
@inject UserManager<User> UserManager;

@inject ClipboardService ClipboardService;

@inject LinkingFacade LinkingFacade;

<PageTitle>Псионик - Мой профиль</PageTitle>

<Loading @ref="Loader" />

<h1>Мой профиль</h1>

<div class="row">
    <div class="col-md-4">
        <section>
            <hr />
            <div class="form-floating mb-3">
                <div for="name" class="form-label">Моё имя <span class="oi oi-info" id="infoName"></span></div>
                <div class="form-field">
                    @Model?.DisplayName
                    <SfTooltip Position="Position.RightCenter"
                               Target="#infoName"
                               CssClass="fontTooltip"
                               Content="Используется для отображения на сайте.">
                    </SfTooltip>
                </div>
            </div>
            <div class="form-floating mb-3">
                <div for="email" class="form-label">Моя электронная почта <span class="oi oi-shield" id="infoEmail"></span></div>
                <div class="form-field">
                    @Model?.Email
                    <SfTooltip Position="Position.RightCenter"
                               Target="#infoEmail"
                               CssClass="fontTooltip"
                               Content="Не показываем никому, кроме Вас.">
                    </SfTooltip>
                </div>
                
            </div>
            <div class="form-floating mb-3">
                <div for="email" class="form-label">Моя ссылка <span class="oi oi-info" id="infoUrl"></span></div>
                <div class="form-field">
                    <button @onclick="CopyLink" class="btn btn-success"><span class="oi oi-copy"></span> Скопировать ссылку</button>
                    <button @onclick="Recreate" class="btn btn-primary"><span class="oi oi-plus"></span> Пересоздать ссылку</button>
                    <SfTooltip Position="Position.RightCenter"
                               Target="#infoUrl"
                               CssClass="fontTooltip"
                               Content="Если Вы получаете помощь - отправьте ссылку тому, кто может Вам помочь. Если Вы оказываете помощь - отправьте ссылку тому, кому Вы хотите помочь.">
                    </SfTooltip>
                </div>
            </div>
        </section>
    </div>
</div>

<SfToast ID="toast_default" @ref="ToastObj" Title="Действие со ссылкой" Content="@Message" Timeout="@MillisecondsToDisplay" Icon="e-meeting">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>



@code {
    Loading Loader;

    private const int MillisecondsToDisplay = 3000;
    private SfToast ToastObj { get; set; }
    private bool LoaderVisible { get; set; }

    private string CurrentUserId { get; set; }

    private ProfileModel Model { get; set; }
    private string Message { get; set; }

    #region Initialization Overrides

    protected override async Task OnInitializedAsync()
    {
        LoaderVisible = true;

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        Message = string.Empty;

        try
        {
            CurrentUserId = UserManager.GetUserId(user)!;

            Model = await LinkingFacade.GetModelByUserId(CurrentUserId);
            Model.UrlForShare = NavigationManager.ToAbsoluteUri($"process-link?publicId={Model.PublicId}").AbsoluteUri;
        }
        catch(Exception)
        {
            Message = "Ошибка при загрузке страницы";
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(Message))
        {
            await ToastObj.ShowAsync();
            Message = string.Empty;
        }

        LoaderVisible = false;
    }

    #endregion

    #region Event Handlers

    public async Task Recreate()
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        Message = "Ссылка обновлена";

        try
        {
            Model.PublicId = await LinkingFacade.RecreateLink(CurrentUserId);
            Model.UrlForShare = NavigationManager.ToAbsoluteUri($"process-link?publicId={Model.PublicId}").AbsoluteUri;
        }
        catch(Exception)
        {
            Message = "Ошибка. Ссылка не обновлена";
        }

        await ToastObj.ShowAsync();
    }

    public async Task CopyLink()
    {
        Message = "Ссылка скопирована";

        try
        {
            await ClipboardService.WriteTextAsync(Model.UrlForShare);
        }
        catch (Exception)
        {
            Message = "Ошибка. Ссылка не скопирована";
        }

        await ToastObj.ShowAsync();
    }

    #endregion
}