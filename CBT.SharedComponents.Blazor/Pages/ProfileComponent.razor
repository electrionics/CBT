@using System.Timers;
@using Microsoft.AspNetCore.Identity

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs

@inject BaseAuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager;
@inject UserManager<User> UserManager;

@inject ClipboardService ClipboardService;
@inject SfDialogService SfDialogService;

@inject LinkingFacade LinkingFacade;

<PageTitle>Псионик - Мой профиль</PageTitle>

<Loading @ref="Loader" />

<h1>Мой профиль</h1>

@code {
    private string? activeBreakpoint;
    private RowDirection rowDirection;
}
<SfMediaQuery @bind-ActiveBreakpoint="activeBreakpoint"></SfMediaQuery>
    @if (activeBreakpoint == "Medium" || activeBreakpoint == "Small")
{
    rowDirection = RowDirection.Vertical;
}
else
{
    rowDirection = RowDirection.Horizontal;
}

<h2>Мои данные</h2>

<div class="row">
    <div class="col-md-4">
        <section>
            <hr />
            <div class="form-floating mb-3">
                <div for="name" class="form-label">Моё имя <span class="oi oi-info" id="infoName"></span></div>
                <div class="form-field">
                    @Model?.DisplayName
                    <SfTooltip Position="Position.RightCenter"
                    Target="#infoName"
                    CssClass="fontTooltip"
                    Content="Используется для отображения на сайте.">
                    </SfTooltip>
                </div>
            </div>
            <div class="form-floating mb-3">
                <div for="email" class="form-label">Моя электронная почта <span class="oi oi-shield" id="infoEmail"></span></div>
                <div class="form-field">
                    @Model?.Email
                    <SfTooltip Position="Position.RightCenter"
                    Target="#infoEmail"
                    CssClass="fontTooltip"
                    Content="Не показываем никому, кроме Вас.">
                    </SfTooltip>
                </div>

            </div>
            <div class="form-floating mb-3">
                <div for="email" class="form-label">Моя ссылка <span class="oi oi-info" id="infoUrl"></span></div>
                <div class="form-field">
                    <button @onclick="CopyLink" class="btn btn-success"><span class="oi oi-copy"></span> Скопировать ссылку</button>
                    <button @onclick="Recreate" class="btn btn-primary"><span class="oi oi-plus"></span> Пересоздать ссылку</button>
                    <SfTooltip Position="Position.RightCenter"
                    Target="#infoUrl"
                    CssClass="fontTooltip"
                    Content="Если Вы получаете помощь - отправьте ссылку тому, кто может Вам помочь. Если Вы оказываете помощь - отправьте ссылку тому, кому Вы хотите помочь.">
                    </SfTooltip>
                </div>
            </div>
            <div class="form-floating mb-3">
                <NavLink class="nav-link" href="account/logout" title="Выход">
                    <span class="oi oi-box-arrow-left" aria-hidden="true"></span> Выход
                </NavLink>
            </div>
        </section>
    </div>

    <h2>Соединенные пользователи</h2>

    <div class="col-md-8">
        <section>
            <hr />
            @if (Model == null)
            {
                <Loading Visible="true" />
            }
            else
            {
                <SfGrid @ref="DataGrid" 
                EnableAdaptiveUI="true" 
                AdaptiveUIMode="AdaptiveMode.Both" 
                RowRenderingMode="@rowDirection" 
                Height="100%" 
                Width="100%"
                DataSource="Model.LinkedUsers"
                AllowTextWrap="true" 
                AllowPaging="true"
                AllowSorting="true"
                AllowFiltering="true">
                    <GridPageSettings PageSize="25"></GridPageSettings>
                    <GridFilterSettings Type="FilterType.Excel"></GridFilterSettings>
                    <GridColumns>
                        <GridColumn Field="@nameof(UserLinkingModel.DisplayName)"
                        HeaderText="Имя пользователя"
                        AllowFiltering="true"
                        AllowSorting="true">
                        </GridColumn>
                        <GridColumn Field="@nameof(UserLinkingModel.IsPatientForCurrent)"
                        HeaderText=""
                        AllowFiltering="false"
                        AllowSorting="false"
                        Visible="Model.IsPsychologist">
                            <HeaderTemplate>
                                Мой клиент <span class="oi oi-info" id="clientInfo"></span>
                                <SfTooltip Position="Position.TopCenter" Target="#clientInfo" Content="Если переключатель включен - клиент может отправлять вам свои записи для комментирования, а вы можете просматривать и комментировать его записи.">
                                </SfTooltip>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var model = (UserLinkingModel)context;

                                    <SfSwitch @bind-Checked="model.IsPatientForCurrent" OnLabel="Да" OffLabel="Нет" TChecked="bool" ValueChange="async (args) => await ToggleConnection(model.PatientId, null, args.Checked)"></SfSwitch>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(UserLinkingModel.IsPsychologistForCurrent)"
                        AllowFiltering="false"
                        AllowSorting="false"
                        Visible="Model.IsPatient">
                            <HeaderTemplate>
                                Мой психолог <span class="oi oi-info" id="psyInfo"></span>
                                <SfTooltip Position="Position.TopCenter" Target="#psyInfo" Content="Если переключатель включен - психолог может просматривать и комментировать отправленные вами записи.">
                                </SfTooltip>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var model = (UserLinkingModel)context;

                                    <SfSwitch @bind-Checked="model.IsPsychologistForCurrent" OnLabel="Да" OffLabel="Нет" TChecked="bool" ValueChange="async (args) => await ToggleConnection(null, model.PsychologistId, args.Checked)"></SfSwitch>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn HeaderText="Действие">
                            <Template>
                                @{
                                    var model = (UserLinkingModel)context;

                                    <SfButton IconCss="oi oi-trash" OnClick="async () => await DeleteConnection(model.PatientId, model.PsychologistId)">Удалить</SfButton>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            }
        </section>
    </div>
</div>

<SfToast ID="toast_default" @ref="ToastObj" Timeout="@MillisecondsToDisplay" Icon="e-meeting">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {
    Loading Loader;

    SfGrid<UserLinkingModel> DataGrid;

    private const int MillisecondsToDisplay = 3000;
    private SfToast ToastObj { get; set; }
    private bool LoaderVisible { get; set; }

    private string CurrentUserId { get; set; }

    private ProfileModel Model { get; set; }

    private string Title => "Действие на странице.";
    private string Message { get; set; }

    #region Initialization Overrides

    protected override async Task OnInitializedAsync()
    {
        LoaderVisible = true;

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        try
        {
            CurrentUserId = UserManager.GetUserId(user)!;

            await Refresh();
        }
        catch(Exception)
        {
            Message = "Ошибка при загрузке страницы.";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(Message))
        {
            await ToastObj.ShowAsync(new ToastModel { Title = Title, Content = Message });
        }

        LoaderVisible = false;
    }

    #endregion

    #region Event Handlers

    public async Task Recreate()
    {
        await using var usage = new LoadingUsage(Loader);
        await usage.StartAsync();

        Message = "Ссылка обновлена";

        try
        {
            Model.PublicId = await LinkingFacade.RecreateLink(CurrentUserId);
            Model.UrlForShare = NavigationManager.ToAbsoluteUri($"process-link?publicId={Model.PublicId}").AbsoluteUri;
        }
        catch(Exception)
        {
            Message = "Ошибка. Ссылка не обновлена";
        }

        await ToastObj.ShowAsync(new ToastModel { Title = Title, Content = Message });
    }

    public async Task CopyLink()
    {
        Message = "Ссылка скопирована.";

        try
        {
            await ClipboardService.WriteTextAsync(Model.UrlForShare);
        }
        catch (Exception)
        {
            Message = "Ошибка. Ссылка не скопирована.";
        }

        await ToastObj.ShowAsync(new ToastModel { Title = Title, Content = Message });
    }

    public async Task ToggleConnection(int? patientId, int? psychologistId, bool value)
    {
        var result = false;

        if (patientId != null)
        {
            result |= await LinkingFacade.SetConnectionWithPatient(CurrentUserId, patientId.Value, value);
        }
        else if (psychologistId != null)
        {
            result |= await LinkingFacade.SetConnectionWithPsychologist(CurrentUserId, psychologistId.Value, value);
        }

        Message = result 
            ? "Сохранено" 
            : "Отказано";
        await ToastObj.ShowAsync(new ToastModel { Title = Title, Content = Message });

        await Refresh();
    }

    public async Task DeleteConnection(int? patientId, int? psychologistId)
    {
        var confirmed = await SfDialogService.ConfirmAsync("Вы действительно хотите удалить пользователя? Действие нельзя будет отменить.", "Подтверждение действия", new()
            {
                ShowCloseIcon = true,
                PrimaryButtonOptions = new()
                {
                    IconCss = "oi oi-trash"
                },
                CancelButtonOptions = new()
                {
                    Content = "Отмена",
                }
            });

        if (confirmed)
        {
            var result = false;

            if (patientId != null)
                result |= await LinkingFacade.DeleteConnectionWithPatient(CurrentUserId, patientId.Value);

            if (psychologistId != null)
                result |= await LinkingFacade.DeleteConnectionWithPsychologist(CurrentUserId, psychologistId.Value);

            if (!result)
            {
                Message = "Соединение между пользователями уже удалено.";
            }
            else
            {
                Message = "Соединение между пользователями успешно удалено.";
            }

            await ToastObj.ShowAsync(new ToastModel { Title = Title, Content = Message });
            await Refresh();
        }
    }

    #endregion

    private async Task Refresh()
    {
        Model = await LinkingFacade.GetModelByUserId(CurrentUserId);
        Model.UrlForShare = NavigationManager.ToAbsoluteUri($"process-link?publicId={Model.PublicId}").AbsoluteUri;
    }
}